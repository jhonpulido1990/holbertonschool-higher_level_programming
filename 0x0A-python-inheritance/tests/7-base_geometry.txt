The 7-base_geometry module to test
======================

Using add_integer
-----------------

Import add_integer from module

>>> BaseGeometry = BaseGeometry = __import__('7-base_geometry').BaseGeometry


>>> bg = BaseGeometry()

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator("distance", 3)

>>> bg.integer_validator("distance", (3))

>>> bg.integer_validator("distance", (3,))
Traceback (most recent call last):
TypeError: distance must be an integer

>>> bg.integer_validator("distance", (-1))
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator(, 1)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> bg.integer_validator("age", [0])
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age", 1.50)
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age", {'p':1})
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age", 999999999999999999999999999999999)

>>> bg.integer_validator("", 1)

>>> bg.integer_validator("", )
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("", None)
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("", (1+1))


>>> bg.integer_validator("", (1, 2, 3))
Traceback (most recent call last):
TypeError:  must be an integer


>>> bg.integer_validator("", {"apple", "banana", "cherry"})
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.integer_validator("", '5')
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.integer_validator("", (1, 2))
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.integer_validator("", NaN)
Traceback (most recent call last):
NameError: name 'NaN' is not defined

>>> bg.integer_validator("", NaN)
Traceback (most recent call last):
NameError: name 'NaN' is not defined

>>> bg.integer_validator("", float(nan))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'nan' is not defined

>>> bg.integer_validator("", "")
Traceback (most recent call last):
TypeError:  must be an integer


>>> bg.integer_validator("", "55843")
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.integer_validator("", True)
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.integer_validator("", False)
Traceback (most recent call last):
TypeError:  must be an integer
